datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

enum Status {
  PAID
  PENDING
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  email      String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  invoices Invoice[]
}

model Invoice {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id    String
  client_name String
  description  String?
  total      Float
  status      Status      @default(PENDING)
  invoiceDate DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  items Item[]
}

model Item {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  invoice_id String
  name       String
  quantity   Int
  price      Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  invoice Invoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)

}















// ============================= prisma schema  =============================
// model User {
//  id             String    @id @default(auto()) @map("_id") @db.ObjectId
//   name           String?
//   hashedPassword String?
//   email          String?   @unique
//   emailVerified  DateTime?
//   image          String?
//   createdAt      DateTime  @default(now())
//   updatedAt      DateTime  @updatedAt
//   accounts Account[]
//   }

// model Account {
//   id                String  @id @default(auto()) @map("_id") @db.ObjectId
//   type              String
//   provider          String
//   providerAccountId String
//   token_type        String?
//   refresh_token     String? @db.String
//   access_token      String? @db.String
//   id_token          String? @db.String
//   scope             String?
//   session_state     String?
//   expires_at        Int?

//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId String @db.ObjectId

//   @@unique([provider, providerAccountId])
//   @@map("account")
// }